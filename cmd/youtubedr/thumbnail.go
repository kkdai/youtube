package main

import (
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/kkdai/youtube/v2"
	"github.com/spf13/cobra"
)

var thumbnailCmd = &cobra.Command{
	Use:     "thumbnail",
	Short:   "Downloads a thumbnail from youtube",
	Example: `youtubedr thumbnail -n maxresdefault -o thumbnail.png https://www.youtube.com/watch\?v\=TGqoAUaivOY`,
	Args:    cobra.ExactArgs(1),
	Run: func(_ *cobra.Command, args []string) {
		exitOnError(downloadThumbnail(args[0]))
	},
}

var (
	thumbnailName string
	noExtend      bool
)

func init() {
	rootCmd.AddCommand(thumbnailCmd)

	thumbnailCmd.Flags().StringVarP(&outputFile, "filename", "o", "", "the output file, the default is generated by the video title")
	thumbnailCmd.Flags().StringVarP(&outputDir, "directory", "d", ".", "the output directory")
	thumbnailCmd.Flags().StringVarP(&thumbnailName, "name", "n", "", "the thumbnail name (ex. \"maxresdefault\")")
	thumbnailCmd.Flags().BoolVarP(&noExtend, "known-only", "k", false, "only try thumbnails received in video response (lower quality)")
}

func downloadThumbnail(url string) error {
	downloader := getDownloader()
	video, err := downloader.GetVideo(url)

	if err != nil {
		return err
	}

	thumbnails := video.Thumbnails
	if !noExtend {
		thumbnails = thumbnails.Extended(video.ID)
	}
	if thumbnailName != "" {
		thumbnails = thumbnails.FilterName(thumbnailName)
	}
	thumbnails.Sort()

	if outputFile == "" {
		return downloadAnyFormat(video.ID, thumbnails)
	}

	ext := filepath.Ext(outputFile)
	switch ext {
	case ".jpg", ".jpeg":
		thumbnails = thumbnails.FilterExt(".jpg")
	case ".webp":
		thumbnails = thumbnails.FilterExt(".webp")
	default:
		return downloadAndEncode(thumbnails)
	}

	return downloadAnyFormat(video.ID, thumbnails)
}

func downloadAnyFormat(videoID string, thumbnails youtube.Thumbnails) error {
	image, mimeType, err := downloader.GetThumbnail(thumbnails)

	if err != nil {
		return err
	}

	defer image.Close()

	var f *os.File

	if outputFile == "" {
		switch mimeType {
		case "image/jpeg":
			f, err = os.Create(filepath.Join(outputDir, fmt.Sprintf("%s.jpg", videoID)))
		case "image/webp":
			f, err = os.Create(filepath.Join(outputDir, fmt.Sprintf("%s.webp", videoID)))
		default:
			return fmt.Errorf("unknown content type: %s", mimeType)
		}
	} else {
		f, err = os.Create(filepath.Join(outputDir, outputFile))
	}

	if err != nil {
		return err
	}

	defer f.Close()

	if _, err := io.Copy(f, image); err != nil {
		return err
	}

	return nil
}

func downloadAndEncode(thumbnails youtube.Thumbnails) error {
	if err := checkFFMPEG(); err != nil {
		return err
	}

	image, _, err := downloader.GetThumbnail(thumbnails)
	if err != nil {
		return err
	}

	defer image.Close()

	//nolint:gosec
	ffmpeg := exec.Command("ffmpeg",
		"-i", "-",
		"-update", "true",
		"-frames:v", "1",
		filepath.Join(outputDir, outputFile),
		"-loglevel", "warning",
	)

	ffmpeg.Stdin = image
	ffmpeg.Stdout = os.Stdout
	ffmpeg.Stderr = os.Stderr

	return ffmpeg.Run()
}
